/* tslint:disable */
/* eslint-disable */
/**
 * ecommerce, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProductCategory } from './ProductCategory';
import {
    ProductCategoryFromJSON,
    ProductCategoryFromJSONTyped,
    ProductCategoryToJSON,
} from './ProductCategory';
import type { ProductField } from './ProductField';
import {
    ProductFieldFromJSON,
    ProductFieldFromJSONTyped,
    ProductFieldToJSON,
} from './ProductField';

/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    description?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    price?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    stockQuantity?: number | null;
    /**
     * 
     * @type {ProductCategory}
     * @memberof Product
     */
    productCategory?: ProductCategory;
    /**
     * 
     * @type {Array<ProductField>}
     * @memberof Product
     */
    productFields?: Array<ProductField> | null;
}

/**
 * Check if a given object implements the Product interface.
 */
export function instanceOfProduct(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProductFromJSON(json: any): Product {
    return ProductFromJSONTyped(json, false);
}

export function ProductFromJSONTyped(json: any, ignoreDiscriminator: boolean): Product {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'price': !exists(json, 'price') ? undefined : json['price'],
        'stockQuantity': !exists(json, 'stockQuantity') ? undefined : json['stockQuantity'],
        'productCategory': !exists(json, 'productCategory') ? undefined : ProductCategoryFromJSON(json['productCategory']),
        'productFields': !exists(json, 'productFields') ? undefined : (json['productFields'] === null ? null : (json['productFields'] as Array<any>).map(ProductFieldFromJSON)),
    };
}

export function ProductToJSON(value?: Product | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'price': value.price,
        'stockQuantity': value.stockQuantity,
        'productCategory': ProductCategoryToJSON(value.productCategory),
        'productFields': value.productFields === undefined ? undefined : (value.productFields === null ? null : (value.productFields as Array<any>).map(ProductFieldToJSON)),
    };
}

