/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/Pages": {
    get: operations["Pages_Get"];
    post: operations["Pages_Post"];
  };
  "/api/Pages/{id}": {
    delete: operations["Pages_Delete"];
  };
  "/api/Products": {
    get: operations["Products_Get"];
    post: operations["Products_Post"];
  };
  "/api/Products/{id}": {
    delete: operations["Products_Delete"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Component: {
      /** Format: int32 */
      id?: number;
    };
    GridColumn: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      width?: number;
      component?: components["schemas"]["Component"] | components["schemas"]["TextComponent"] | components["schemas"]["ImageComponent"];
    };
    GridRow: {
      /** Format: int32 */
      id?: number;
      columns?: (components["schemas"]["GridColumn"])[] | null;
    };
    ImageComponent: ({
      imageUrl?: string | null;
    }) & components["schemas"]["Component"];
    NotFoundResult: {
      /** Format: int32 */
      statusCode?: number;
    };
    OkResult: {
      /** Format: int32 */
      statusCode?: number;
    };
    Page: {
      /** Format: int32 */
      id?: number | null;
      title?: string | null;
      url?: string | null;
      children?: (components["schemas"]["Page"])[] | null;
      visibleInMenu?: boolean | null;
      requiredRole?: components["schemas"]["UserRoles"];
      gridContent?: (components["schemas"]["GridRow"])[] | null;
    };
    ProblemDetails: {
      type?: string | null;
      title?: string | null;
      /** Format: int32 */
      status?: number | null;
      detail?: string | null;
      instance?: string | null;
      [key: string]: unknown;
    };
    Product: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      description?: string | null;
      /** Format: double */
      price?: number | null;
      /** Format: int32 */
      stockQuantity?: number | null;
      productCategory?: components["schemas"]["ProductCategory"];
      productFields?: (components["schemas"]["ProductField"])[] | null;
    };
    ProductCategory: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      description?: string | null;
      subcategories?: (components["schemas"]["ProductCategory"])[] | null;
    };
    ProductField: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      description?: string | null;
      fieldType?: string | null;
      isEnabled?: boolean | null;
      value?: string | null;
    };
    TextComponent: ({
      text?: string | null;
    }) & components["schemas"]["Component"];
    /**
     * Format: int32 
     * @enum {integer}
     */
    UserRoles: 0;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  Pages_Get: {
    parameters: {
      query?: {
        url?: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["OkResult"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundResult"];
        };
      };
    };
  };
  Pages_Post: {
    parameters: {
      query?: {
        title?: string;
        parentId?: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Page"];
        };
      };
    };
  };
  Pages_Delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  Products_Get: {
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Product"])[];
        };
      };
    };
  };
  Products_Post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product"];
        "text/json": components["schemas"]["Product"];
        "application/*+json": components["schemas"]["Product"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
    };
  };
  Products_Delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "text/plain": components["schemas"]["Product"];
          "application/json": components["schemas"]["Product"];
          "text/json": components["schemas"]["Product"];
        };
      };
    };
  };
}
