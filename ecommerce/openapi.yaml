openapi: 3.0.1
info:
  title: 'ecommerce, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
  version: '1.0'
paths:
  /api/Pages:
    get:
      tags:
        - Pages
      operationId: Pages_GET
      parameters:
        - name: url
          in: query
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResult'
        '204':
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResult'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '504':
          description: Server Error
        '505':
          description: Server Error
  '/api/Pages/{id}':
    delete:
      tags:
        - Pages
      operationId: Pages_DELETE
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/Products:
    post:
      tags:
        - Products
      operationId: Products_POST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          text/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    get:
      tags:
        - Products
      operationId: Products_GET
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  '/api/Products/{id}':
    delete:
      tags:
        - Products
      operationId: Products_DELETE
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Product'
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            text/json:
              schema:
                $ref: '#/components/schemas/Product'
components:
  schemas:
    ActionResultBase:
      type: object
      additionalProperties: false
    NotFoundResult:
      type: object
      allOf:
        - $ref: '#/components/schemas/ActionResultBase'
      additionalProperties: false
    OkResult:
      type: object
      allOf:
        - $ref: '#/components/schemas/ActionResultBase'
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: { }
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        price:
          type: number
          format: double
          nullable: true
        stockQuantity:
          type: integer
          format: int32
          nullable: true
        productCategory:
          $ref: '#/components/schemas/ProductCategory'
        productFields:
          type: array
          items:
            $ref: '#/components/schemas/ProductField'
          nullable: true
      additionalProperties: false
    ProductCategory:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        subcategories:
          type: array
          items:
            $ref: '#/components/schemas/ProductCategory'
          nullable: true
      additionalProperties: false
    ProductField:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        fieldType:
          type: string
          nullable: true
        isEnabled:
          type: boolean
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false